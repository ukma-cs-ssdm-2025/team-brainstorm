from fastapi.testclient import TestClient
from src.api.main import app
from uuid import uuid4

client = TestClient(app)


def test_health():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ API –∂–∏–≤–µ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å 'ok'."""
    r = client.get("/health")
    assert r.status_code == 200
    assert r.json() == {"status": "ok"}


# --- üß© –ö–ù–ò–ì–ò ---
def test_list_books():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ."""
    r = client.get("/books/")
    assert r.status_code == 200
    data = r.json()
    assert isinstance(data, list)
    if len(data) > 0:
        book = data[0]
        assert "id" in book
        assert "title" in book
        assert "author" in book


def test_list_books_available_only():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥."""
    r = client.get("/books/?available_only=true")
    assert r.status_code == 200
    books = r.json()
    for b in books:
        assert b["total_copies"] - b.get("reserved_count", 0) > 0


# --- üìö –û–ù–õ–ê–ô–ù-–ö–ê–¢–ê–õ–û–ì ---
def test_search_books_by_title():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—à—É–∫ –∫–Ω–∏–≥ –∑–∞ –Ω–∞–∑–≤–æ—é –≤ –æ–Ω–ª–∞–π–Ω-–∫–∞—Ç–∞–ª–æ–∑—ñ."""
    r = client.get("/catalog/search", params={"query": "Python"})
    assert r.status_code == 200
    books = r.json()
    assert isinstance(books, list)
    for book in books:
        assert "title" in book
        assert "Python" in book["title"] or "Python" in book["description"]


def test_catalog_pagination():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –æ–Ω–ª–∞–π–Ω-–∫–∞—Ç–∞–ª–æ–≥—É."""
    r = client.get("/catalog?page=1&limit=2")
    assert r.status_code == 200
    data = r.json()
    assert "items" in data
    assert "total" in data
    assert len(data["items"]) <= 2


# --- üë§ –ö–û–†–ò–°–¢–£–í–ê–ß–Ü –¢–ê –†–û–õ–Ü ---
def test_user_registration_and_roles():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ —Ä–æ–ª—ñ."""
    user_payload = {
        "username": f"user_{uuid4().hex[:6]}",
        "password": "test123",
        "role": "user"
    }
    librarian_payload = {
        "username": f"librarian_{uuid4().hex[:6]}",
        "password": "secure123",
        "role": "librarian"
    }

    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    r1 = client.post("/users/register", json=user_payload)
    assert r1.status_code == 201, r1.text
    data1 = r1.json()
    assert data1["role"] == "user"

    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è
    r2 = client.post("/users/register", json=librarian_payload)
    assert r2.status_code == 201
    data2 = r2.json()
    assert data2["role"] == "librarian"

    # –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –º–∞—î –±–∞—á–∏—Ç–∏ –≤—Å—ñ —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó
    r3 = client.get("/reservations/all?role=librarian")
    assert r3.status_code == 200


# --- üîî –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –ü–†–û –ü–û–í–ï–†–ù–ï–ù–ù–Ø ---
def test_send_reminder_for_due_books():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥."""
    r = client.post("/reminders/send")
    assert r.status_code in (200, 202)
    result = r.json()
    assert "sent_reminders" in result
    assert isinstance(result["sent_reminders"], int)


# --- üìñ –†–ï–ó–ï–†–í–ê–¶–Ü–á ---
def test_create_and_cancel_reservation():
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó."""
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–Ω—É –∫–Ω–∏–≥—É
    r = client.get("/books/")
    assert r.status_code == 200
    books = r.json()
    assert len(books) > 0, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–Ω–∏–≥–∏ –¥–ª—è —Ç–µ—Å—Ç—É"

    book = books[0]
    user_id = str(uuid4())
    payload = {"user_id": user_id, "book_id": book["id"]}

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—é
    r2 = client.post("/reservations/", json=payload)
    assert r2.status_code == 201, r2.text
    res = r2.json()
    assert "id" in res
    assert res["user_id"] == user_id

    res_id = res["id"]

    # –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—é
    r3 = client.delete(f"/reservations/{res_id}")
    assert r3.status_code == 204


def test_cancel_nonexistent_reservation():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó –ø–æ–≤–µ—Ä—Ç–∞—î 404."""
    fake_id = str(uuid4())
    r = client.delete(f"/reservations/{fake_id}")
    assert r.status_code == 404


def test_create_reservation_with_invalid_book():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó –∑ –Ω–µ—ñ—Å–Ω—É—é—á–æ—é –∫–Ω–∏–≥–æ—é –Ω–µ –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è."""
    user_id = str(uuid4())
    fake_book_id = str(uuid4())
    payload = {"user_id": user_id, "book_id": fake_book_id}

    r = client.post("/reservations/", json=payload)
    assert r.status_code == 404


def test_create_reservation_missing_fields():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–æ–ª—è—Ö."""
    r = client.post("/reservations/", json={"user_id": str(uuid4())})
    assert r.status_code == 422
